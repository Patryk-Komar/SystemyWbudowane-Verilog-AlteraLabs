// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/08/2018 21:15:55"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          binary_8_bits_BCD
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module binary_8_bits_BCD_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [9:0] SW;
// wires                                               
wire [0:6] HEX0;
wire [0:6] HEX1;
wire [0:6] HEX2;
wire [9:0] LEDR;

// assign statements (if any)                          
binary_8_bits_BCD i1 (
// port map - connection between master ports and signals/registers   
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.LEDR(LEDR),
	.SW(SW)
);
initial 
begin 
#128000 $finish;
end 
// SW[ 9 ]
initial
begin
	SW[9] = 1'b0;
end 
// SW[ 8 ]
initial
begin
	SW[8] = 1'b0;
end 
// SW[ 7 ]
always
begin
	SW[7] = 1'b0;
	SW[7] = #64000 1'b1;
	#64000;
end 
// SW[ 6 ]
always
begin
	SW[6] = 1'b0;
	SW[6] = #32000 1'b1;
	#32000;
end 
// SW[ 5 ]
always
begin
	SW[5] = 1'b0;
	SW[5] = #16000 1'b1;
	#16000;
end 
// SW[ 4 ]
always
begin
	SW[4] = 1'b0;
	SW[4] = #8000 1'b1;
	#8000;
end 
// SW[ 3 ]
always
begin
	SW[3] = 1'b0;
	SW[3] = #4000 1'b1;
	#4000;
end 
// SW[ 2 ]
always
begin
	SW[2] = 1'b0;
	SW[2] = #2000 1'b1;
	#2000;
end 
// SW[ 1 ]
always
begin
	SW[1] = 1'b0;
	SW[1] = #1000 1'b1;
	#1000;
end 
// SW[ 0 ]
always
begin
	SW[0] = 1'b0;
	SW[0] = #500 1'b1;
	#500;
end 
endmodule

